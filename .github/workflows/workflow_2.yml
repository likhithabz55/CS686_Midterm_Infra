name: Deploy to Temporary EC2

on:
  workflow_run:
    workflows: ["Nightly Build"]
    types:
      - completed
  workflow_dispatch:

env:
  MyEC2KeyPair: |
    ${{ secrets.MyEC2KeyPair }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aws-region: ${{ secrets.AWS_REGION }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: "likhithabz55/CS686_Midterm_Source"

      - name: Setting up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$MyEC2KeyPair" > ~/.ssh/MyEC2KeyPair.pem
          chmod 400 ~/.ssh/MyEC2KeyPair.pem

      - name: Launching temporary EC2
        run: |
         aws ec2 run-instances \
           --image-id ami-05b10e08d247fb927 --count 1 \
           --instance-type t2.micro --key-name MyEC2KeyPair \
           --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=temp_EC2}]'

      - name: Fetch IP of EC2
        run: |
          echo "Instance successfully launched"
          echo "fetching IP"
          export IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=temp_EC2" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo $IP
          echo "IP=$IP" >> $GITHUB_ENV

      - name: Copying test, init.sql, docker-compose files from source repo to EC2
        run: |
          echo $IP
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no test/test_2.sh ec2-user@$IP:~/
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no init.sql ec2-user@$IP:~/
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no docker-compose.ec2.yml ec2-user@$IP:~/
        

      - name: Checkout Infra Repository
        uses: actions/checkout@v4
        with:
          repository: "likhithabz55/CS686_Midterm_Infra"

      - name: Copy sh files
        run: |
          echo $IP
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no ./dev/image_push.sh ec2-user@$IP:~/
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no ./dev/docker_setup.sh ec2-user@$IP:~/
          scp -i ~/.ssh/MyEC2KeyPair.pem -o StrictHostKeyChecking=no ./dev/ecr_steps.sh ec2-user@$IP:~/
          
      - name: Setup Docker and pull and run containers.
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/MyEC2KeyPair.pem ec2-user@"$IP" << 'EOF'
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            export DOCKER_CONFIG=$HOME/.docker
          
            echo "Docker setup"
            chmod +x docker_setup.sh
            ./docker_setup.sh
            newgrp docker
            echo "ECR"
            chmod +x ecr_steps.sh
            ./ecr_steps.sh
          
            echo "docker build"
            docker compose up -d
            exit
          EOF

      - name: Integration_tests & push to registry
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/MyEC2KeyPair.pem ec2-user@"$IP" << 'EOF'
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            
            chmod +x test_2.sh
            ./test_2.sh
            
            if [ $? -ne 0 ]; then
              echo "Tests failed"
              aws ecr batch-delete-image \
                --repository-name midterm/ecr_1 \
                --image-ids imageTag=$BACKEND_TIMESTAMP

              aws ecr batch-delete-image \
                --repository-name midterm/ecr_1 \
                --image-ids imageTag=$FRONTEND_TIMESTAMP
            else
              chmod +x image_push.sh
              ./image_push.sh
            fi
            exit 
          EOF

      - name: Deleting EC2 instance
        run: |
          export instance_id=$(aws ec2 describe-instances --filters \
            "Name=instance-state-name,Values=running" \
            "Name=tag:Name,Values=temp_EC2" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          echo "instance_id=$instance_id"
          aws ec2 terminate-instances --instance-ids $instance_id
          echo "Instance shutting down"
          
          
          
          
